>>A Terraform Workspace is a way to manage multiple state files within the same Terraform configuration directory. Each workspace has its own state file, allowing you to reuse the same configuration for different environments (like dev, staging, and prod) without duplicating code.

>>Basic Commands

terraform workspace list              # Lists all workspaces
terraform workspace new dev          # Creates 'dev' workspace
terraform workspace select dev       # Switches to 'dev' workspace
terraform workspace show             # Shows current workspace
terraform apply 

‚úÖ Scenario 1: Real-Time Deployment for Dev, Staging, and Prod using Workspaces
Code Summary:

resource "aws_instance" "my_instance" {
  ami           = "ami-0f88e80871fd81e91"
  instance_type = var.instance_type
  tags = {
    Name = terraform.workspace
  }
}
Explanation:
Uses terraform.workspace to dynamically tag resources and change configurations per environment.

This assumes you've created workspaces like dev, staging, prod.

Example:

In dev, you might pass instance_type = "t2.micro"

In prod, instance_type = "t3.large"

Use Case:
Ideal for teams that want strong environment isolation.

Each environment has:

Its own state file.

Individual apply/destroy cycles.

Custom variables set using terraform.tfvars.

Benefits:
Clean separation.

Safer deployments.

Easier to rollback per environment.



Looping Without Workspaces (No Isolation):(NOT BEST PRACTISE)
variable "environments" {
  type = list(string)
  default = ["dev", "staging", "prod"]
}

resource "aws_instance" "per_env" {
  count         = length(var.environments)
  ami           = "ami-0f88e80871fd81e91"
  instance_type = "t2.micro"
  tags = {
    Name = var.environments[count.index]
  }
}

‚úÖ Scenario 2: Provisioning S3 Buckets per Environment
Code Summary (Workspace-Based):


resource "aws_s3_bucket" "logs" {
  bucket = "logs-${terraform.workspace}-bucket"
}
Alternative (Looping-Based):

variable "environments" {
  default = ["dev", "staging", "prod"]
}

resource "aws_s3_bucket" "logs" {
  count  = length(var.environments)
  bucket = "logs-${var.environments[count.index]}-bucket"
}
Explanation:
In workspace mode: each environment gets its own uniquely named bucket.

In loop mode: you provision all environments at once in one state file.

Use Case:
If you need state isolation, prefer workspaces.

If you want a quick deploy of all environments (e.g., in a sandbox), loop might be okay.

Trade-Off Table:
Feature    			Workspaces	          			    Looping
State Isolation			 ‚úÖ Yes	      					 ‚ùå No
Risk of Mass Failure		‚ùå Low					‚ö†Ô∏è High ‚Äì affects all environments
Destructive Control		‚úÖ Yes (per env)			‚ùå No (destroys all at once)
Deployment Flexibility		‚úÖ Deploy one env at a time		‚ùå All at once






‚úÖ Scenario 3: VPC per Environment with Conditional CIDR Blocks


resource "aws_vpc" "main" {
  cidr_block = "10.${terraform.workspace == "prod" ? 0 : terraform.workspace == "staging" ? 1 : 2}.0.0/16"
  tags = {
    Name = "${terraform.workspace}-vpc"
  }
}
Explanation:
Dynamically assigns VPC CIDRs based on workspace:

prod ‚Üí 10.0.0.0/16

staging ‚Üí 10.1.0.0/16

dev ‚Üí 10.2.0.0/16

Ensures non-overlapping network ranges per environment.

Use Case:
Perfect for staging vs. prod separation in multi-tier environments.

Helps avoid IP conflicts and simplifies route tables and peering later.

Benefits:
Clean logical separation.

Easily extendable to peered networks or hybrid cloud.

‚úÖ Scenario 4: RDS per Environment with Varying Sizes
Code Summary:

resource "aws_db_instance" "db" {
  identifier        = "app-db-${terraform.workspace}"
  instance_class    = terraform.workspace == "prod" ? "db.t3.large" : "db.t3.micro"
  allocated_storage = terraform.workspace == "prod" ? 100 : 20
  engine            = "mysql"
  username          = "admin"
  password          = "admin123"
  skip_final_snapshot = true
}
Explanation:
Adjusts database size and performance based on the environment.

Keeps prod high-performing, while dev/staging are cost-efficient.

Use Case:
Essential for companies who want:

Cost efficiency in dev

Realistic testing in staging

High performance in production

Benefit:
Reduces monthly cost.

Avoids over-provisioning in non-critical environments.

Allows realistic production simulation in staging if needed.

‚úÖ General Hypothesis Discussion: Workspaces vs. Looping
When to Use Workspaces:
You need isolated state files.

Teams deploy and manage environments independently.

You want granular control over apply/destroy commands.

Ideal for CI/CD pipelines where environments are deployed separately.

When to Use Looping in One Workspace:
You want to deploy all environments at once (like for quick PoC).

You don‚Äôt need strong isolation.

Easier to manage with a single backend.






Scenario 1: Looping EC2 Instances per Environment

variable "environments" {
  type    = list(string)
  default = ["dev", "staging", "prod"]
}

resource "aws_instance" "per_env" {
  count         = length(var.environments)
  ami           = "ami-0f88e80871fd81e91"
  instance_type = lookup(
    {
      dev     = "t2.micro"
      staging = "t2.medium"
      prod    = "t3.large"
    },
    var.environments[count.index],
    "t2.micro"
  )
  tags = {
    Name = "ec2-${var.environments[count.index]}"
  }
}
‚úÖ Scenario 2: Looping S3 Buckets per Environment

variable "environments" {
  type    = list(string)
  default = ["dev", "staging", "prod"]
}

resource "aws_s3_bucket" "logs" {
  count  = length(var.environments)
  bucket = "logs-${var.environments[count.index]}-bucket"
  acl    = "private"
  tags = {
    Environment = var.environments[count.index]
  }
}
‚úÖ Scenario 3: Looping VPCs per Environment


variable "environments" {
  type    = list(string)
  default = ["dev", "staging", "prod"]
}

resource "aws_vpc" "per_env" {
  count      = length(var.environments)
  cidr_block = "10.${count.index}.0.0/16"

  tags = {
    Name = "${var.environments[count.index]}-vpc"
  }
}
This sets:

dev ‚Üí 10.0.0.0/16

staging ‚Üí 10.1.0.0/16

prod ‚Üí 10.2.0.0/16

Modify the logic if you want different CIDRs.

‚úÖ Scenario 4: Looping RDS Instances per Environment

variable "environments" {
  type    = list(string)
  default = ["dev", "staging", "prod"]
}

resource "aws_db_instance" "db" {
  count             = length(var.environments)
  identifier        = "app-db-${var.environments[count.index]}"
  engine            = "mysql"
  username          = "admin"
  password          = "admin123"
  skip_final_snapshot = true

  instance_class = lookup(
    {
      dev     = "db.t3.micro"
      staging = "db.t3.micro"
      prod    = "db.t3.large"
    },
    var.environments[count.index],
    "db.t3.micro"
  )

  allocated_storage = lookup(
    {
      dev     = 20
      staging = 20
      prod    = 100
    },
    var.environments[count.index],
    20
  )
}
üîÅ Summary of Looping Benefits (with Caveats)
‚úÖ Quick and concise for demos or POCs.

‚ùå No state isolation (one terraform.tfstate tracks all).

‚ùå One destroy removes everything.